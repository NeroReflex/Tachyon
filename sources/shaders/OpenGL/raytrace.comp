#version 450

#define COMP_SIZE 32

#define expOfTwoOfMaxGeometryElementsInCollection 3
#define expOfTwoOfMaxCollectionElementsInBLAS 3
#define expOfTwoOfMaxBLASElementsInTLAS 3

// This gets adjusted on each call by the OpenGL core
layout(local_size_x = COMP_SIZE, local_size_y = COMP_SIZE, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D img_output;

uniform uint width;
uniform uint height;

struct Geometry {
	float data[4];
};

struct GeometryCollection {
	Geometry geometry[1 << expOfTwoOfMaxGeometryElementsInCollection]; // geometry slots
	uint geometryCount; // Number of used geometry slots
};

struct BLAS {
	mat4x4 ModelMatrix;
	GeometryCollection collection[1 << expOfTwoOfMaxCollectionElementsInBLAS];
};

struct TLAS {
	mat4x4 ViewMatrix;
	BLAS blas[1 << expOfTwoOfMaxBLASElementsInTLAS];
};

layout(std140, binding = 0) buffer scene {
	TLAS tlas[];
};

void main() {
	// base pixel colour for image
	vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);
	// get index in global work group i.e x,y position
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	// Avoid calculating useless pixels
	if ((gl_GlobalInvocationID.x >= width) || (gl_GlobalInvocationID.y >= height))
		return;

	//
	// interesting stuff happens here later
	//
	pixel = vec4(gl_LocalInvocationID.x, gl_LocalInvocationID.y, 1, 1.0);

  /*
  In order to fit the work into workgroups, some unnecessary threads are launched.
  We terminate those threads here. 
  */

  float x = float(gl_GlobalInvocationID.x) / width;
  float y = float(gl_GlobalInvocationID.y) / height;

  /*
  What follows is code for rendering the mandelbrot set. 
  */
  vec2 uv = vec2(x,y);
  float n = 0.0;
  vec2 c = vec2(-.445, 0.0) +  (uv - 0.5)*(2.0+ 1.7*0.2  ), 
  z = vec2(0.0);
  const int M =128;
  for (int i = 0; i<M; i++)
  {
    z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;
    if (dot(z, z) > 2) break;
    n++;
  }
          
  // we use a simple cosine palette to determine color:
  // http://iquilezles.org/www/articles/palettes/palettes.htm         
  float t = float(n) / float(M);
  vec3 d = vec3(0.3, 0.3 ,0.5);
  vec3 e = vec3(-0.2, -0.3 ,-0.5);
  vec3 f = vec3(2.1, 2.0, 3.0);
  vec3 g = vec3(0.0, 0.1, 0.0);
  vec4 color = vec4( d + e*cos( 6.28318*(f*t+g) ) ,1.0);
  
	// output to a specific pixel in the image
	imageStore(img_output, pixel_coords, color);
}