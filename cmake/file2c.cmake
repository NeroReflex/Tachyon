#-------------------
# portably convert binary file to header
#-------------------
FUNCTION(FILE2C INFILE VARNAME OUTFILE)
    FILE(READ ${INFILE} HEXFILE HEX)
    STRING(LENGTH ${HEXFILE} XRSLEN)
    SET(HEXPOS 0)
    FILE(WRITE ${OUTFILE}
            "#pragma once\n\n"
            "// Do NOT edit this file by hand: use CMake to regenerate this file\n"
            "static const unsigned char ${VARNAME}[] = {\n")
    WHILE(${HEXPOS} LESS ${XRSLEN})
        MATH(EXPR LPOS "${HEXPOS} % 32")
        IF(NOT ${LPOS})
            FILE(APPEND ${OUTFILE} "\n")
        ENDIF(NOT ${LPOS})
        STRING(SUBSTRING ${HEXFILE} ${HEXPOS} 2 HEXBYTE)
        FILE(APPEND ${OUTFILE} "0x${HEXBYTE}")
        MATH(EXPR HEXPOS "${HEXPOS} + 2")
        IF(${HEXPOS} LESS ${XRSLEN})
            FILE(APPEND ${OUTFILE} ",")
        ENDIF(${HEXPOS} LESS ${XRSLEN})
    ENDWHILE(${HEXPOS} LESS ${XRSLEN})
    FILE(APPEND ${OUTFILE} "};\nstatic const size_t ${VARNAME}_size = sizeof(${VARNAME});\n")
ENDFUNCTION(FILE2C)

# Example
#file(GLOB_RECURSE OPENGL_SHADERS_SOURCES ${PROJECT_SOURCE_DIR}/sources/shaders/OpenGL/*)
#foreach(SHADER_SRC ${OPENGL_SHADERS_SOURCES})
#    get_filename_component(SHADER_NAME ${SHADER_SRC} NAME) # append  to have a working CMake
#    string(TOUPPER "${SHADER_NAME}" SHADER_UPPERNAME)
#    string(REPLACE "." "_" SHADER_C_NAME "${SHADER_UPPERNAME}")
#    FILE2C("${SHADER_SRC}" "SHADER_${SHADER_C_NAME}" "${EMBEDDED_GL_SHADERS_DIR}/shaders/${SHADER_NAME}.h")
#endforeach()
